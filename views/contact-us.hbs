<hr class="navbar-seperator"/>
<div class="container">
    <div class="row">
        <div class="col-xs-12">
            <div class="sect1">
                <h2 id="_circuit_breaker_hystrix_clients">Circuit Breaker: Hystrix Clients</h2>

                <div class="sectionbody">
                    <div class="paragraph">
                        <p>Netflix has created a library called <a href="https://github.com/Netflix/Hystrix">Hystrix</a>
                            that implements the <a href="http://martinfowler.com/bliki/CircuitBreaker.html">circuit
                                breaker pattern</a>. In a microservice architecture it is common to have multiple layers
                            of service calls.</p>
                    </div>
                    <div class="imageblock">
                        <div class="content">
                            <img class="img-responsive" src="http://cloud.spring.io/spring-cloud-netflix/images/HystrixGraph.png" alt="HystrixGraph">
                        </div>
                        <div class="title">Figure 1. Microservice Graph</div>
                    </div>
                    <div class="paragraph">
                        <p>A service failure in the lower level of services can cause cascading failure all the way up
                            to the user. When calls to a particular service reach a certain threshold (20 failures in 5
                            seconds is the default in Hystrix), the circuit opens and the call is not made. In cases of
                            error and an open circuit a fallback can be provided by the developer.</p>
                    </div>
                    <div class="imageblock">
                        <div class="content">
                            <img class="img-responsive" src="http://cloud.spring.io/spring-cloud-netflix/images/HystrixFallback.png" alt="HystrixFallback">
                        </div>
                        <div class="title">Figure 2. Hystrix fallback prevents cascading failures</div>
                    </div>
                    <div class="paragraph">
                        <p>Having an open circuit stops cascading failures and allows overwhelmed or failing services
                            time to heal. The fallback can be another Hystrix protected call, static data or a sane
                            empty value. Fallbacks may be chained so the first fallback makes some other business call
                            which in turn falls back to static data.</p>
                    </div>
                    <div class="paragraph">
                        <p>Example boot app:</p>
                    </div>
                    <div class="listingblock">
                        <div class="content">
<pre>@SpringBootApplication
@EnableCircuitBreaker
public class Application {

    public static void main(String[] args) {
        new SpringApplicationBuilder(Application.class).web(true).run(args);
    }

}

@Component
public class StoreIntegration {

    @HystrixCommand(fallbackMethod = "defaultStores")
    public Object getStores(Map&lt;String, Object&gt; parameters) {
        //do stuff that might fail
    }

    public Object defaultStores(Map&lt;String, Object&gt; parameters) {
        return /* something useful */;
    }
}</pre>
                        </div>
                    </div>
                    <div class="paragraph">
                        <p>The <code>@HystrixCommand</code> is provided by a Netflix contrib library called
                            <a class="img-responsive" href="https://github.com/Netflix/Hystrix/tree/master/hystrix-contrib/hystrix-javanica">"javanica"</a>.
                            Spring Cloud automatically wraps Spring beans with that
                            annotation in a proxy that is connected to the Hystrix circuit
                            breaker. The circuit breaker calculates when to open and close the
                            circuit, and what to do in case of a failure.</p>
                    </div>
                    <div class="paragraph">
                        <p>To configure the <code>@HystrixCommand</code> you can use the <code>commandProperties</code>
                            attribute with a list of <code>@HystrixProperty</code> annotations. See
                            <a href="https://github.com/Netflix/Hystrix/tree/master/hystrix-contrib/hystrix-javanica#configuration">here</a>
                            for more details. See the <a href="https://github.com/Netflix/Hystrix/wiki/Configuration">Hystrix
                                wiki</a>
                            for details on the properties available.</p>
                    </div>
                    <div class="sect2">
                        <h3 id="_propagating_the_security_context_or_using_spring_scopes">Propagating the Security
                            Context or using Spring Scopes</h3>

                        <div class="paragraph">
                            <p>If you want some thread local context to propagate into a <code>@HystrixCommand</code>
                                the default declaration will not work because it executes the command in a thread pool
                                (in case of timeouts). You can switch Hystrix to use the same thread as the caller using
                                some configuration, or directly in the annotation, by asking it to use a different
                                "Isolation Strategy". For example:</p>
                        </div>
                        <div class="listingblock">
                            <div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">@HystrixCommand(fallbackMethod = "stubMyService",
    commandProperties = {
    @HystrixProperty(name="execution.isolation.strategy", value="SEMAPHORE")
    }
    )
    ...</code></pre>
                            </div>
                        </div>
                        <div class="paragraph">
                            <p>The same thing applies if you are using <code>@SessionScope</code> or
                                <code>@RequestScope</code>. You will know when you need to do this because of a runtime
                                exception that says it canâ€™t find the scoped context.</p>
                        </div>
                    </div>
                    <div class="sect2">
                        <h3 id="_health_indicator">Health Indicator</h3>

                        <div class="paragraph">
                            <p>The state of the connected circuit breakers are also exposed in the
                                <code>/health</code> endpoint of the calling application.</p>
                        </div>
                        <div class="listingblock">
                            <div class="content">
<pre class="highlight"><code class="language-json" data-lang="json">{
    "hystrix": {
    "openCircuitBreakers": [
    "StoreIntegration::getStoresByLocationLink"
    ],
    "status": "CIRCUIT_OPEN"
    },
    "status": "UP"
    }</code></pre>
                            </div>
                        </div>
                    </div>
                    <div class="sect2">
                        <h3 id="_hystrix_metrics_stream">Hystrix Metrics Stream</h3>

                        <div class="paragraph">
                            <p>To enable the Hystrix metrics stream include a dependency on <code>spring-boot-starter-actuator</code>.
                                This will expose the <code>/hystrix.stream</code> as a management endpoint.</p>
                        </div>
                        <div class="listingblock">
                            <div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">    &lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
    &lt;/dependency&gt;</code></pre>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!--            &lt;!&ndash;WYSIWYG content - do not remove this comment, and never use this identical text in your topics&ndash;&gt;
                        <h1 class="TML">iOS Release Process</h1>
                        <p>The following steps outline how to release a new version of the universal iPhone/iPad app</p>
                        <p><span class="WYSIWYG_PROTECTED"><br />%TOC%</span></p>
                        <h2 class="TML">Create a new app version in iTunes Connect</h2>
                        <p>&nbsp;</p>
                        <ol>
                            <li> Go to itunesconnect.apple.com </li>
                            <li> Select 'manage your apps' </li>
                            <li> Select Rightmove </li>
                            <li> Click 'Add Version' </li>
                            <li> Fill in the details (The 'Whats new in this version' can be updated later, but must be done before the app goes into review </li>
                            <li> Click 'Ready to Upload Binary' </li>
                            <li> Say no to legal questions </li>
                            <li> Choose to release the app after it has been approved yourself </li>
                        </ol>
                        <p>&nbsp;</p>
                        <h2 class="TML">Take a branch</h2>
                        <p>first off, we need to take a branch of the code. this can be done from anywhere that has svn installed:</p>
                        <pre class="TMLverbatim">svn&nbsp;copy&nbsp;svn://svn.rightmove.com/dev/ios/trunk&nbsp;svn://svn.rightmove.com/dev/ios/branches/ios-3.0.2&nbsp;&nbsp;-m&nbsp;"AA-485&nbsp;-&nbsp;Creating&nbsp;a&nbsp;branch&nbsp;ios-3.0.2&nbsp;for&nbsp;release"<br /></pre>
                        <p>&nbsp;</p>
                        <p>where 3.0.2 is the new version number</p>
                        <h2 class="TML">Remove dev specific code</h2>
                        <p>At the time of writing this there are a couple of things that need to be changed <strong>on the branch only</strong> before building a release version so open up a copy of the branch in XCode and follow these steps:</p>
                        <p>&nbsp;</p>
                        <ol>
                            <li> Remove everything except the 'Max Cached Properties' element from the 'Preference Items' section in the Root.plist file </li>
                            <li> Update the 'Bundle version' , 'Bundle versions string, short' and 'RMBuildVersion' (in Rightmove-Info.plist) (plus any other fields apple decide to introduce related to version number!) to be the latest version number e.g. 3.0.2 </li>
                            <li> Commit to branch </li>
                        </ol>
                        <h2 class="TML">Do a build to a device</h2>
                        <p>This is just to ensure that everything is hooked up ok. At this point get a QA to do a quick run through if possible.</p>
                        <h2 class="TML">Archive the build for release</h2>
                        <ol>
                            <li> Ensure a real device or 'iOS Device' is selected in the build dropdown rather than a simulator </li>
                            <li> Go to Product -&gt; Archive </li>
                            <li> The 'Organizer' should pop up with the archives tab open </li>
                            <li> Click Distribute </li>
                            <li> Select 'Submit to the iOS App Store' and hit Next </li>
                            <li> Enter a valid username associated with the apple account and hit Next </li>
                            <li> Ensure the code signing identity is 'Rightmove <span class="WYSIWYG_LINK">RMUniversalAppStore</span>' and hit Next </li>
                            <li> At this point you may get notified of any issues that Apple have with the app, these will have to be recitfied before attempting the steps in this section again </li>
                        </ol>
                        <h2 class="TML">Sanity testing</h2>
                        <p>We should do sanity testing against the build that was released. If any issues are found, you can click 'Reject Binary' in iTunes connect and repeat the steps in the previous section with the fixed up code</p>
                        <h2 class="TML">Cleanup</h2>
                        <p>Commit any changes you have made to the branch as well as any relevant ones back to trunk</p>-->
        </div>
    </div>
</div>

