<div id="main" class=" aui-page-panel" style="margin-left: 55px;">

            <h1 id="title-text" class="with-breadcrumbs">
                <a href="/wiki/display/SEAR/Property+Web+-+A+FED%27s+tale">Property Web - A FED's tale</a>
            </h1>
        </div>
    </div>
    <!-- \#main-header -->


    <div id="content" class="page view">


        <a href="#page-metadata-start" class="assistive">Go to start of metadata</a>

        <div id="page-metadata-end" class="assistive"></div>


        <div id="main-content" class="wiki-content">

            <h2 id="PropertyWeb-AFED'stale-Howthejavascriptisbuiltandbundled">How the javascript is built and
                bundled</h2>

            <p>When you run ./gradlew bootrun to start the app, this does a number of things - but what does it do to
                the javascript files ?</p>
            <ul style="list-style-type: square;">
                <li>It runs npm prune to get rid of the unneeded packages in node_modules</li>
                <li>It runs npm install to install all of the dependencies in package.json.</li>
                <li>it then runs gulp ci. This is a gulp task found in the folder gulpTasks in index.js.</li>
                <li>This task performs two tasks, gulp lint and gulp build. gulp build is the one we are interested
                    in.
                </li>
                <li>gulp build runs a sequence of tasks one of which is called scripts.</li>
            </ul>
            <p>&nbsp;</p>

            <p>The gulp scripts task is a wrapper around webpack.&nbsp;<a href="https://webpack.github.io/"
                                                                          class="external-link" rel="nofollow">https://webpack.github.io/</a>
            </p>

            <p>Webpack is a bundling tool that creates a single JS file out of all of individual modules that interact
                with each other.</p>

            <p>Webpack needs an entry file to start its bundling. These bundle entry files are located in
                src/main/javascript/modules. They are specified in the webpack.config.js in the gulpTasks folder.</p>

            <p>We create different bundles for different pages (searchPage bundle, error page bundle ...)</p>

            <p>For example, the search page bundle is started in&nbsp;src/main/javascript/modules/search/index.js</p>

            <p>This file instantiates a few different requirements before kicking off&nbsp;&nbsp;src/main/javascript/modules/search/bootstrap.js.</p>

            <p>This bootstrap file is where the app is started once the DOM is ready.</p>

            <p>&nbsp;</p>

            <p>These bundles are then dumped into the build folder ready to be requested when the page is loaded.</p>

            <p>The javascript files are in the html in the propertySearch.html file</p>

            <h2 id="PropertyWeb-AFED'stale-Knockout">Knockout</h2>

            <p>Front end devs tend to ask about what library we use. We use Knockout as a very lightweight API for DOM
                manipulation. We use ES6 javascript for the rest of our App.&nbsp;<a
                        href="http://knockoutjs.com/documentation/introduction.html" class="external-link"
                        rel="nofollow">http://knockoutjs.com/documentation/introduction.html</a></p>

            <h2 id="PropertyWeb-AFED'stale-Flux">Flux</h2>

            <p>We use the flux architecture extensively in Property Web.&nbsp;<a
                    href="https://facebook.github.io/react/docs/flux-overview.html" class="external-link"
                    rel="nofollow">https://facebook.github.io/react/docs/flux-overview.html</a></p>

            <p>PropertyWeb can be thought of in layers.</p>

            <p>&nbsp;</p>

            <p>&nbsp;</p>

            <p><span class="confluence-embedded-file-wrapper"><img class="confluence-embedded-image"
                                                                   src="/wiki/download/attachments/9831433/Screen%20Shot%202016-02-12%20at%2014.32.07.png?version=1&amp;modificationDate=1455287649972&amp;api=v2"
                                                                   data-image-src="/wiki/download/attachments/9831433/Screen%20Shot%202016-02-12%20at%2014.32.07.png?version=1&amp;modificationDate=1455287649972&amp;api=v2"
                                                                   data-unresolved-comment-count="0"
                                                                   data-linked-resource-id="9831440"
                                                                   data-linked-resource-version="1"
                                                                   data-linked-resource-type="attachment"
                                                                   data-linked-resource-default-alias="Screen Shot 2016-02-12 at 14.32.07.png"
                                                                   data-base-url="https://rightmove.atlassian.net/wiki"
                                                                   data-linked-resource-content-type="image/png"
                                                                   data-linked-resource-container-id="9831433"
                                                                   data-linked-resource-container-version="6"></span>
            </p>
            <ol>
                <li>A user interacts with the UI (clicks a button for example)</li>
                <li>Knockout calls a handler function in the View Model Layer eg. buttonClickHandler() (that we have
                    asked Knockout to call when the action occurs)
                </li>
                <li>The handler is called in the View Model layer and it asks an action creator to create a 'button
                    clicked' action.
                </li>
                <li>The action creator layer is responsible for creating an action and asking the dispatcher to dispatch
                    this action.
                    <ol>
                        <li>In this layer, we can also make async request to other services like getting new properties
                            or authenticating a user.
                        </li>
                    </ol>
                </li>
                <li>The dispatcher will dispatch the action that has occurred.
                    <ol>
                        <li>we have also written a custom wrapper around the dispatcher so that if we want to track an
                            action, we can add a tracking field to the action and the dispatcher will dispatch a custom
                            action for tracking.
                        </li>
                    </ol>
                </li>
                <li>The stores are set up to listen for actions that the dispatcher dispatches. They are responsible for
                    changing the application state based on certain actions and then emitting a change event. eg. if
                    this button opens a sidebar when clicked, a store could change it's state's sidebarOpen field from
                    false to true on this button click action, and then emit a change event.
                </li>
                <li>The View Model layer (same layer as layer 3) can listen for changes to the stores and then update
                    when the stores change. This is a classic pubsub pattern.
                </li>
                <li>When the VIew Model layer updates, Knockout will update the UI to match the new state of
                    application.
                </li>
            </ol>
            <p>What is important to understand is that we could, when we call the handler in step 3, update the
                viewModel there and then to update the UI accordingly.&nbsp;</p>

            <p>However this is a bad pattern because it doesnt allow the rest of the application to know what has
                occured.</p>

            <h2 id="PropertyWeb-AFED'stale-Jest">Jest</h2>

            <p>We use jest as out test runner. The jest config is found at the bottom of the package JSON.&nbsp;<a
                    href="https://facebook.github.io/jest/docs/api.html" class="external-link" rel="nofollow">https://facebook.github.io/jest/docs/api.html</a>
            </p>

            <p>Jest automocks all dependencies by default. This means that you can test a module in isolation from every
                module that it requires or imports.</p>

            <p>However, sometimes you need to specifiy what you want a certain dependency to return. so you have to
                write a mocked return value for a function.&nbsp;</p>

            <h2 id="PropertyWeb-AFED'stale-Tracking">Tracking</h2>

            <p>The tracking is all set up around the dispatcher. If you look in the file 'core/dispatcher/index.js' you
                can see that the dispatcher.dispatch method is cached into nativeDispatch and overwritten.</p>

            <p>In this file you can see that if the payload has a tracking field, we dispatch a tracking action. This is
                listened to by the tracking store.</p>

            <p>Therefore, all you need to do to track something, is add a tracking field to an action and sets its value
                to a list of things you want to track.</p>

            <p>&nbsp;</p>

            <p>Then in core/analytics/tracking/search/index.js you need to map each tracking object in your array to a
                tracking function where you actually do the tracking.</p>

            <p>We track to Clickstream, GA and Comscore. they are all dealt with in this file.</p>

            <p>&nbsp;</p>

            <p><span class="confluence-embedded-file-wrapper"><img class="confluence-embedded-image"
                                                                   src="/wiki/download/attachments/9831433/Screen%20Shot%202016-02-12%20at%2015.06.21.png?version=1&amp;modificationDate=1455289600064&amp;api=v2"
                                                                   data-image-src="/wiki/download/attachments/9831433/Screen%20Shot%202016-02-12%20at%2015.06.21.png?version=1&amp;modificationDate=1455289600064&amp;api=v2"
                                                                   data-unresolved-comment-count="0"
                                                                   data-linked-resource-id="9831443"
                                                                   data-linked-resource-version="1"
                                                                   data-linked-resource-type="attachment"
                                                                   data-linked-resource-default-alias="Screen Shot 2016-02-12 at 15.06.21.png"
                                                                   data-base-url="https://rightmove.atlassian.net/wiki"
                                                                   data-linked-resource-content-type="image/png"
                                                                   data-linked-resource-container-id="9831433"
                                                                   data-linked-resource-container-version="6"></span>
            </p>
            <ol>
                <li>A user performs an interaction with the UI. eg. presses the 'turn everything gold button'.</li>
                <li>Knockout calls the 'turn-everything-gold-button-click-handler' function in the view model.</li>
                <li>The view model ask the action creator to create a 'turn-everything-gold-button-clicked' action&nbsp;<strong>and
                    crucially adds a tracking field to the action.</strong></li>
                <li>The action creators asks the dispatcher to dispatch the&nbsp;'turn-everything-gold-button-clicked'&nbsp;&nbsp;action,
                    same as always.
                </li>
                <li><strong>The dispatcher sniffs inside the 'turn-everything-gold-button-clicked' action&nbsp;payload
                    to see if there is a tracking field</strong><br>
                    <ol>
                        <li><strong>if there is a tracking field it dispatches a TRACKING action with the tracking data
                            set in the view model</strong><strong><br></strong></li>
                    </ol>
                </li>
                <li>The tracking store listens for tracking actions and emits a change when one occurs.</li>
                <li>The tracking/search/index.js file has everything it needs to track to the three tracking platforms
                    by mapping the tracking action sent by the tracking store into a function that can deal with the&nbsp;&nbsp;''turn-everything-gold-button-clicked''
                    tracking concerns.
                </li>
            </ol>
            <h2 id="PropertyWeb-AFED'stale-ThePropertyCardsandthePropertyCardViewmodel">The Property Cards and the
                Property Card View model</h2>

            <p>Property Web is designed to be approach-able and understandable in its architecture.</p>

            <p>There is one big exception to this. - The Property Card View Model. duh duh duuuuuuuh</p>

            <p>Because we want to re-render the property cards very quickly on ajax requests for new properties (when
                someone changes a filter), we actually have a skeleton DOM for all the property cards on the page, which
                we then populate with data and images. When properties change, we dont change the DOM, we just update
                the data that populates the DOM.</p>

            <p>Because lots of the property cards have different data (some might have certain flags/fields that others
                dont have), we have created a property card ghost schema which contains everything a property card could
                contain.</p>

            <p>look at window.jsonModel.propertySchema on the website to see the ghost schema.</p>

            <p>This ghost schema forms the default data for each property. For each property card, we override this
                ghost object with the properties own data. This means that each property card has all the different
                fields of data that a property could have. (even though some of this data might be empty strings or null
                values)</p>

            <p>The overriding of the ghost schema is done in the function&nbsp;updatePropertyDetailsBasedOnSchema.</p>

            <h2 id="PropertyWeb-AFED'stale-Howthepageisrendered">How the page is rendered</h2>

            <p>The page is rendered by the pebbles rendering package on the back-end by the Java code. We render on the
                backend so that we can allow SEO crawlers to index our pages.&nbsp;</p>

            <p>The javascript bundle is then loaded on the client and uses Knockout to&nbsp;attach View Models to the
                exisiting DOM, and also creates other components to insert into the page.</p>

            <p>&nbsp;</p>


        </div>

        <!--
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns:dc="http://purl.org/dc/elements/1.1/"
         xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
         <rdf:Description
    rdf:about="https://rightmove.atlassian.net/wiki/display/SEAR/Property+Web+-+A+FED%27s+tale"
    dc:identifier="https://rightmove.atlassian.net/wiki/display/SEAR/Property+Web+-+A+FED%27s+tale"
    dc:title="Property Web - A FED&#39;s tale"
    trackback:ping="https://rightmove.atlassian.net/wiki/rpc/trackback/9831433"/>
</rdf:RDF>
-->


        <div id="likes-and-labels-container">
            <div id="likes-section"><a href="" class="like-button"><span
                    class="aui-icon aui-icon-small aui-iconfont-like"></span><span
                    class="like-button-text">Unlike</span></a><span class="like-summary">You like this</span></div>
            <div id="labels-section" class="pageSection group">
                <div class="labels-section-content content-column" entityid="9831433" entitytype="page">
                    <div class="labels-content">

                        <ul class="label-list label-list-right  has-pen">
                            <li class="no-labels-message">
                                No labels
                            </li>
                            <li class="labels-edit-container">
                                <a href="#" class="show-labels-editor" title="Edit Labels (l)">
                                    <span class="aui-icon aui-icon-small aui-iconfont-edit-small">Edit Labels</span>
                                </a>
                            </li>
                        </ul>

                    </div>
                </div>
            </div>
        </div>


        <div id="comments-section" class="pageSection group">


            <div class="bottom-comment-panels comment-panels">


                <div class="quick-comment-container comment add"><p class="comment-user-logo"><a
                        class="userLogoLink userlink-0" data-username="Confluence@rightmove.co.uk"
                        href="/wiki/display/~Confluence%40rightmove.co.uk" title="" data-user-hover-bound="true"><img
                        class="userLogo logo" src="/wiki/download/attachments/1507339/user-avatar"
                        alt="User icon: Confluence@rightmove.co.uk" title=""></a></p>

                    <div class="quick-comment-body">
                        <div class="quick-comment-loading-container" style="display:none;"></div>
                        <div id="editor-messages"></div>
                        <div id="all-messages"></div>
                        <form style="display:block;" class="quick-comment-form aui" method="post"
                              name="inlinecommentform" action="/wiki/pages/doaddcomment.action?pageId=9831433">
                            <div title="Add a Comment (m)" class="quick-comment-prompt"><span>Write a comment…</span>
                            </div>
                        </form>
                    </div>
                </div>

            </div>

            <div id="comments-actions" class="aui-toolbar noprint" style="display: none;">
                <p class="toolbar-group">
                    <span class="toolbar-item"><a
                            href="/wiki/display/SEAR/Property+Web+-+A+FED%27s+tale?showComments=true&amp;showCommentArea=true#addcomment"
                            id="add-comment-rte" accesskey="m" class="toolbar-trigger">Add Comment</a></span>
                </p>
            </div>
        </div>


    </div>


    <div id="space-tools-web-items" class="hidden">
        <div data-label="Overview" data-href="/wiki/spaces/viewspacesummary.action?key=SEAR">Overview</div>
        <div data-label="Content Tools" data-href="/wiki/pages/reorderpages.action?key=SEAR">Content Tools</div>
    </div>


</div>